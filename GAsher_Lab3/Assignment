Assignment is as follows
Purpose
This laboratory draws a simple fractal figure using recursive calls. A "Turtle" class will be provided to draw a line segment or changes its forward direction. You have to implement a main function that can test Turtle class to draw, move, turn, etc. Thereafter, you should derive Sierpinski arrowhead, using "Turtle".

Turtle Graphics
A Turtle graphics tool behaves as a pen point. Given initial (x, y) coordinates, it responds to one of the following three messages at a time:

draw
draw a straight line with a given distance from the current point and move to the other end point of this line.
move
move straight to the destination whose distance from the current point is given as an argument. Do not draw any line segments.
turn
turn left (counter clockwise) by a given angle. Turtle is initialized to draw/move to the right direction. If it is ordered to turn by 90, 180, 270, and 360 degrees, it is ready to draw/move to the up, left, down, and right direction, respectively.
Since C++ cannot draw any graphical image directly on a computer display, Turtle should output its locus in postscript format.

A Minimalist Overview of the Postscript Language
We cover only the most basic, simplified aspects of the Postscript language necessary for this assignment; a more complete reference to the language is the PostScript Language Reference (Links to an external site.). Postscript is a stack-based, interpreted language, and a function is called by first pushing its arguments onto a stack and then specifying the function name. Any time a literal integer argument appears in the input, it is pushed onto the stack. Thus, the command 0 0 moveto calls the moveto function, which takes two arguments (which were pushed onto the stack first). Because Postscript is a graphics language, there are a host of basic functions which produce graphical output. We will need the use of only a few basic commands, which are part of Level 2 Postscript:

moveto
Set the current point to (x, y). Takes two arguments: x and y.
rmoveto
Perform a relative moveto. The two arguments, dx and dy, are displacements from the current position.
lineto
Draw a straight line to (x, y). Takes two arguments: the xand y coordinates of the line segment end point. The line segment start point is the current point.
rlineto
Perform a relative lineto. Takes two arguments: the dx and dy displacement of the line segment end point from the current point. The line segment start point is the current point.
stroke
Draw a line along the current path. The preceding commands don't actually do any drawing, they just indicate a path along which drawing can occur (technically, they ``append'' to the current path). The stroke command causes an actual line to be drawn where previous lineto and rlinetocommands indicated.
showpage
Causes the graphics to be rendered to the page (required if you want to print the page).
By default, the units for coordinates are points (a point is 1/72 of an inch); therefore the commands 50 50 moveto 70 70 lineto stroke would produce a one inch diagonal line from the lower left to the upper right position.

%!PS-Adobe-2.0
 50   50 moveto
 70   70 rlineto
150  150 moveto
 70   70 rlineto
stroke
showpage
Statement of Work
Part 1) Download (Files-->Lab/lab3/ folder) Turtle.hPreview the documentView in a new window,Turtle.cppPreview the documentView in a new window,TurtleDriver.cppPreview the documentView in a new window, put them in Linux, and compile to get output-1.pdf file. 

The following is a main() in "TurtleDriver.cpp". The output should be saved in the output.ps file. 

#include "Turtle.h"
#include <iostream>
using namespace std;
int main( )
{
  Turtle turtle(50, 50);

  turtle.turn(45);
  turtle.draw(200);
  turtle.turn(-135);
  turtle.move(140);
  turtle.turn(225);
  turtle.draw(200);
}
To view your output, compile Turtle.cpp and TurtleDriver.cpp and run the executable. In the same directory, you will get output.ps.

That is, 

=========================

g++ Turtle.cpp TurtleDriver.cpp

./a.out

========================

 

On Windows
Convert output.ps to pdf using Acrobat Distiller/Reader.
On Mac OS
Click output.ps so that it is automatically converted to pdf and viewed with preview
Linux
Follow the instructions below
  ps2pdf output.ps output-1.pdf
Note that ps2pdf may give an error message for even a correct output.ps. However it will generate a PDF file if the ps is correct.

Part 2

A level 1 right curve of Sierpinski arrowhead is drawn by a series of operations including draw, turn(-60), draw, turn(-60), and draw.



For a multilevel right curve, all we need is replace those three draws with left curve, right curve, and left curve of one level down. The following figure is a level 2 right curve.



A level 1 left curve is drawn by a series of dual operations such as draw, turn(+60), draw, turn(+60), and draw.



Similarly, for a multilevel right curve, all we need is replace those three draws with right curve, left curve, and right curve of one level down. The following figure shows a level 2 left curve.



The following is the header file of the Sierpinski class which is derived from the Turtle using class inheritance. Since class inheritance will be formally taught in CSS343, for now, just use the header file as shown below:

// Sierpinski Class 
#ifndef SIERPINSKI_H
#define SIERPINSKI_H

#include "Turtle.h"
#include <iostream>
#include <math.h>
using namespace std;

class Sierpinski : Turtle {
public:
  Sierpinski( float initX=0.0, float initY=0.0, float initAngle=0.0 );
  void leftCurve( int l, float d );  //draw a level-l left curve with dist d
  void rightCurve( int l, float d ); //draw a level-l right curve with dist d
};
#endif
An overview of "Sierpingski.cpp" could be:

// Sierpinski member function definitions
#include "Sierpinski.h"

//------------------------- Sierpinski Arrowhead ----------------------------
Sierpinski::Sierpinski( float initX, float initY, float initAngle ) 
  : Turtle( initX, initY, initAngle ) {
}

//------------------------------ leftCurve ----------------------------------
// draw a level-l left curve with dist d
void Sierpinski::leftCurve( int level, float d ) {
  if ( level > 0 ) {
    // implement this part!!
  }
  else
    draw( d );
}

//------------------------------ rightCurve ---------------------------------
// draw a level-l right curve with dist d
void Sierpinski::rightCurve( int level, float d ) {
  if ( level > 0 ) {
    // implement this part!!
  }
  else
    draw( d );
}

Complete the above "Sierpinski.cpp", compile it with the "driver.cppPreview the documentView in a new window"View in a new window given below, and check if your program has drawn Sierpinski arrowhead curves correctly.

#include "Sierpinski.h"
#include <iostream>
using namespace std;

int main( ) {
  // right sierpinski at level 5
  Sierpinski sierp1( 120, 120, 0 );
  sierp1.rightCurve( 5, 4 );

  // left sierpinski at level 5
  Sierpinski sierp2( 400, 10, 0 );
  sierp2.leftCurve( 5, 4 );

  // left sierpinski at level 4
  Sierpinski sierp3( 120, 240, 0 );
  sierp3.leftCurve( 4, 8 );

  // right sierpinski at level 4
  Sierpinski sierp4( 400, 130, 0 );
  sierp4.rightCurve( 4, 8 );

  // right sierpinski at level 3
  Sierpinski sierp5( 120, 360, 0 );
  sierp5.rightCurve( 3, 12 );

  // left sierpinski at level 3
  Sierpinski sierp6( 400, 250, 0 );
  sierp6.leftCurve( 3, 12 );

  // left sierpinski at level 2
  Sierpinski sierp7( 120, 480, 0 );
  sierp7.leftCurve( 2, 16 );

  // right sierpinski at level 2
  Sierpinski sierp8( 400, 370, 0 );
  sierp8.rightCurve( 2, 16 );

  // right sierpinski at level 1
  Sierpinski sierp9( 120, 600, 0 );
  sierp9.rightCurve( 1, 20 );

  // left sierpinski at level 1
  Sierpinski sierp10( 400, 490, 0 );
  sierp10.leftCurve( 1, 20 );

}
Note that the Turtle class is hard-coded to produce the same "output.ps" file, and it will append pages if you do not remove the existing ones. Therefore, if you want to have separate output.ps file, you should remove previous one. 
