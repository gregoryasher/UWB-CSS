Purpose
This programming assignment empirically analyzes the running time of the Sieve of Eratosthenes. You will code this program, plot its running time, and compare it with O(N log log N).

The Sieve of Eratosthenes
The professor will briefly discuss the algorithm in the class.  You should read about it beforehand and come prepared.

http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes (Links to an external site.)

Statement of Work
Write a program that reads the integer n and finds all primes in the range 2 to n. Your program prints out the running cost, (i.e., the number of array-sweeping operations required to find all those primes). To verify the correctness of your program, you should handle a printing option given from the standard input, as shown below:
  char printOption = 'n';
  cout << "print all primes (y|n)? ";
  cin >> printOption;

  if ( printOption == 'y' ) {
     // print all primes
  }
If this option has been set, your program should print out all primes in the range 2 to n.
 

Plot the array-sweeping cost, (i.e., # of operatins, each crossing out an array element whose index is a multiplication of a given prime number) as increasing n from 2 to 10,000 in a graph. You don't have to plot such number every increment of n. Choose an appropriate increment of n, (say, 1,000) to view the growth of modulus operations.
 

Plot n log n, n log( log n ), and n in the same graph and compare your empirical data with these functions. To which function are your empirical outputs upper bound? (If you don't have a calculator, use the linux calculator.)
Turn in two documents:

1) a PDF or Excel softcopy of a graph that includes plots of empirical data, n log n, n log( log n ), and n.

2) source code. 

 
================================

use the following as a main framework

 ===============================

#include <iostream>
#include <vector>
#include <math.h>

using namespace std;

int sieve( int n, vector<int> &primes ) {


int cost = 0;
bool array[n + 1];

// 1. Implement array initialization so that every value is prime except 0 and 1

// 2. Implement Sieve of Eratosthenes algorithm to find prime numbers
// Add cost whenever the array becomes to prime

// 3. Push back the prime numbers into primes (parameter)


return cost;


}

main( ) {

 

int n = 0;

cout << "Enter n ";
cin >> n;

char printOption = 'n';
cout << "print all primes (y|n)? ";
cin >> printOption;

//

for ( int i = 2; i <= n; i++ ) {

vector<int> primes;
int cost = sieve( i, primes );

cout << "primes[1.." << i << "] took " << cost
<< " sweeping operations" << endl;

if ( printOption == 'y' ) {
cout << "all primes = ";
for ( int j = 0; j < primes.size( ); j++ )
cout << primes[j] << " ";
cout << endl;

}

cerr << i << " " << cost << endl;

}


}

 

===================================================
